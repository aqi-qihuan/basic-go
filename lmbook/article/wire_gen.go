// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"basic-go/lmbook/article/events"
	"basic-go/lmbook/article/grpc"
	"basic-go/lmbook/article/ioc"
	"basic-go/lmbook/article/repository"
	"basic-go/lmbook/article/repository/cache"
	"basic-go/lmbook/article/repository/dao"
	"basic-go/lmbook/article/service"
	"basic-go/lmbook/pkg/wego"
	"github.com/google/wire"
)

// Injectors from wire.go:

func Init() *wego.App {
	loggerV1 := ioc.InitLogger()
	db := ioc.InitDB(loggerV1)
	articleDAO := dao.NewGORMArticleDAO(db)
	cmdable := ioc.InitRedis()
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := repository.NewArticleRepository(articleDAO, articleCache, loggerV1)
	userServiceClient := ioc.InitUserRpcClient()
	authorRepository := repository.NewGrpcAuthorRepository(articleDAO, userServiceClient)
	syncProducer := ioc.InitProducer()
	producer := events.NewSaramaSyncProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, authorRepository, loggerV1, producer)
	articleServiceServer := grpc.NewArticleServiceServer(articleService)
	client := ioc.InitEtcdClient()
	server := ioc.InitGRPCxServer(articleServiceServer, client, loggerV1)
	app := &wego.App{
		GRPCServer: server,
	}
	return app
}

// wire.go:

var thirdProvider = wire.NewSet(ioc.InitRedis, ioc.InitLogger, ioc.InitUserRpcClient, ioc.InitProducer, ioc.InitEtcdClient, ioc.InitDB)
